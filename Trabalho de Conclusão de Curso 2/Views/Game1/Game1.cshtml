@model Trabalho_de_Conclusão_de_Curso_2.Models.Game1Model
@using Trabalho_de_Conclusão_de_Curso_2.Entities.Game1
@using Newtonsoft.Json
@{
    ViewData["Title"] = "Privacy Policy";
    string sobrancelhas = JsonConvert.SerializeObject(Model.sobrancelhas);
    string olhos = JsonConvert.SerializeObject(Model.olhos);
    string bocas = JsonConvert.SerializeObject(Model.bocas);

    PesoModel peso1Azul = new PesoModel { Cor = "Azul", Peso = 0.5, Index = 1 };
    PesoModel peso2Azul = new PesoModel { Cor = "Azul", Peso = 0.5, Index = 2 };
    PesoModel peso3Azul = new PesoModel { Cor = "Azul", Peso = 0.5, Index = 3 };
    PesoModel peso1Vermelho = new PesoModel { Cor = "Vermelho", Peso = 0.5, Index = 1 };
    PesoModel peso2Vermelho = new PesoModel { Cor = "Vermelho", Peso = 0.5, Index = 2 };
    PesoModel peso3Vermelho = new PesoModel { Cor = "Vermelho", Peso = 0.5, Index = 3 };
    PesoModel peso1Verde = new PesoModel { Cor = "Verde", Peso = 0.5, Index = 1 };
    PesoModel peso2Verde = new PesoModel { Cor = "Verde", Peso = 0.5, Index = 2 };
    PesoModel peso3Verde = new PesoModel { Cor = "Verde", Peso = 0.5, Index = 3 };
    PesoModel peso1Preto = new PesoModel { Cor = "Preto", Peso = 0.5, Index = 1 };
    PesoModel peso2Preto = new PesoModel { Cor = "Preto", Peso = 0.5, Index = 2 };
    PesoModel peso3Preto = new PesoModel { Cor = "Preto", Peso = 0.5, Index = 3 };
    List<PesoModel> pesos = new List<PesoModel>();
    pesos.Add(peso1Azul);
    pesos.Add(peso2Azul);
    pesos.Add(peso3Azul);
    pesos.Add(peso1Vermelho);
    pesos.Add(peso2Vermelho);
    pesos.Add(peso3Vermelho);
    pesos.Add(peso1Verde);
    pesos.Add(peso2Verde);
    pesos.Add(peso3Verde);
    pesos.Add(peso1Preto);
    pesos.Add(peso2Preto);
    pesos.Add(peso3Preto);
 
    /*double peso1Azul = 0.5;
    double peso2Azul = 0.5;
    double peso3Azul = 0.5;
    double peso1Vermelho = 0.5;
    double peso2Vermelho = 0.5;
    double peso3Vermelho = 0.5;
    double peso1Verde = 0.5;
    double peso2Verde = 0.5;
    double peso3Verde = 0.5;
    double peso1Preto = 0.5;
    double peso2Preto = 0.5;
    double peso3Preto = 0.5;*/

    double erromedioSoma = 0;
    double erroMedio = 0;




    List<SomaAtivacaoModel> somaAtivacoes = new List<SomaAtivacaoModel>();
    List<SomaAtivacaoModel> somaAtivacoesSaida = new List<SomaAtivacaoModel>();
    List<ErroMedioModel> erroMedioClasse = new List<ErroMedioModel>();
    List<DerivadaModel> derivadasSaida = new List<DerivadaModel>();
    List<DerivadaModel> derivadasNeuronios = new List<DerivadaModel>();
    List<DeltaModel> deltaSaida = new List<DeltaModel>();
    List<DeltaModel> deltaEscondida = new List<DeltaModel>();

}

<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0," />

    <link rel="stylesheet" href="~/css/Game1/Game1.css" />

    <title>Game 1</title>
</head>

<body>

    <script src="https://code.jquery.com/jquery-1.9.1.js"></script>
    <script src="~/js/Game1/Game1.js"></script>
    <div class="flex-box container-box">
        <div class="content-box">
            <div class="boneco">
                <div class="game-board" id="game-board">

                    <img src="~/Content/Game1/IArley/IArley.png" class="IArley" alt="Alternate Text" />

                    <div id="divSobrancelha">
                        <img src="~/Content/Game1/IArley/sobrancelha neutra.png" class="Sobrancelha" id="Sobrancelha" alt="Alternate Text" />
                    </div>

                    <div id="divOlhos">
                        <img src="~/Content/Game1/IArley/olhos neutro.png" class="Olhos" id="Olhos" alt="Alternate Text" />
                    </div>

                    <div>
                        <input type="image" src="~/Content/Game1/IArley/proximo-botao.png" border="0" onclick="mudarSobrancelha(@sobrancelhas)" style="position: absolute; top: 170px; left: 550px;" title="Mudar Sobrancelha" />
                    </div>

                    <div>
                        <input type="image" src="~/Content/Game1/IArley/proximo-botao.png" border="0" onclick="mudarOlhos(@olhos)" style="position: absolute; top: 238px; left: 550px;" title="Mudar Olhos" />
                    </div>

                    <div>
                        <input type="image" src="~/Content/Game1/IArley/proximo-botao.png" border="0" onclick="mudarBoca(@bocas)" style="position: absolute; top: 385px; left: 550px;" title="Mudar Boca" />
                    </div>
                    <div id="divBoca">
                        <img src="~/Content/Game1/IArley/boca neutra.png" class="Boca" id="Boca" alt="Alternate Text" />
                    </div>
                </div>
            </div>

            <div class="future">
                <h2>Content</h2>
            </div>
        </div>
    </div>
    <div class="flex-box RedeETabela">
        <div class="Rede">
            <div class="flex-box container-box">
                <div class="imagem">
                    <div class="sobrancelhaEntry">
                        000
                    </div>
                    <div class="olhosEntry">
                        000
                    </div>

                    <div class="bocaEntry">
                        000
                    </div>
                    <div class="peso1Azul">
                        @peso1Azul.Peso
                    </div>
                    <div class="peso1Vermelho">
                        @peso2Azul.Peso
                    </div>
                    <div class="peso1Verde">
                        @peso3Azul.Peso
                    </div>
                    <div class="peso2Azul">
                        @peso1Vermelho.Peso
                    </div>
                    <div class="peso2Vermelho">
                        @peso2Vermelho.Peso
                    </div>
                    <div class="peso2Verde">
                        @peso3Vermelho.Peso
                    </div>
                    <div class="peso3Azul">
                        @peso1Verde.Peso
                    </div>
                    <div class="peso3Vermelho">
                        @peso2Verde.Peso
                    </div>
                    <div class="peso3Verde">
                        @peso3Verde.Peso
                    </div>
                    <div class="peso1Preto">
                        000
                    </div>
                    <div class="peso2Preto">
                        000
                    </div>
                    <div class="peso3Preto">
                        000
                    </div>
                    <div class="somaAtivacaoN1">
                        Soma=
                        <br>
                        Ativação=
                    </div>
                    <div class="somaAtivacaoN2">
                        Soma=
                        <br>
                        Ativação=
                    </div>
                    <div class="somaAtivacaoN3">
                        Soma=
                        <br>
                        Ativação=
                    </div>
                </div>
            </div>
        </div>


    </div>

    <div class="table treinamento">
        <table border="1">
            <h2>Treinamento</h2>
            <tr>
                <td>Id</td>
                <td>Sobrancelhas</td>
                <td>Olhos</td>
                <td>Boca</td>
                <td>Humor</td>

                @foreach (IArleyTraining t in Model.training)
                {
                <tr>
                    <td>@t.Id</td>
                    <td>@t.Sobrancelha</td>
                    <td>@t.Olhos</td>
                    <td>@t.Boca</td>
                    <td>@t.Humor</td>
                </tr>
            }

            </table>

        </div>

    </body>
    @for (int i = 0; i < Model.training.Count; i++)
    {
        SomaAtivacaoModel model = new SomaAtivacaoModel { IndexList = i };
        IArleyTraining t = Model.training[i];
        double somaAzul = (t.Sobrancelha * peso1Azul.Peso) + (t.Olhos * peso2Azul.Peso) + (t.Boca * peso3Azul.Peso);
        double sigmoideAzul = 1 / (1 + (Math.Pow(2.77, -somaAzul)));
        Result result = new Result { soma = somaAzul, cor = "Azul", ativacao = sigmoideAzul };
        model.somasEAtivacoes.Add(result);


        double somaVermelho = (t.Sobrancelha * peso1Vermelho.Peso) + (t.Olhos * peso2Vermelho.Peso) + (t.Boca * peso3Vermelho.Peso);
        double sigmoideVermelho = 1 / (1 + (Math.Pow(2.77, -somaVermelho)));
        result = new Result { soma = somaVermelho, cor = "Vermelho", ativacao = sigmoideVermelho };
        model.somasEAtivacoes.Add(result);



        double somaVerde = (t.Sobrancelha * peso1Verde.Peso) + (t.Olhos * peso2Verde.Peso) + (t.Boca * peso3Verde.Peso);
        double sigmoideVerde = 1 / (1 + (Math.Pow(2.77, -somaVerde)));
        result = new Result { soma = somaVerde, cor = "Verde", ativacao = sigmoideVerde };
        model.somasEAtivacoes.Add(result);
        somaAtivacoes.Add(model);

    }

    @for (int i = 0; i < Model.training.Count; i++)
    {
        SomaAtivacaoModel model = new SomaAtivacaoModel { IndexList = i };
        List<SomaAtivacaoModel> t = somaAtivacoes.Where(x=> x.IndexList==i).ToList();
        double somaPreto = 0;
        foreach (SomaAtivacaoModel sam in t)
        {

            somaPreto = (sam.somasEAtivacoes[0].ativacao * peso1Preto.Peso) + (sam.somasEAtivacoes[1].ativacao * peso2Preto.Peso) + (sam.somasEAtivacoes[2].ativacao * peso3Preto.Peso);
            double sigmoidePreto = 1 / (1 + (Math.Pow(2.77, -somaPreto)));
            Result result = new Result { soma = somaPreto, cor = "Preto", ativacao = sigmoidePreto };
            model.somasEAtivacoes.Add(result);
        }
        somaAtivacoesSaida.Add(model);
    }
    <div class="table treinamento">
        <table border="1">
            <h2>Treinamento</h2>
            <tr>
                <td>Id</td>
                <td>Ativacao</td>
                <td>Soma</td>
                <td>Cor</td>
            </tr>
            @foreach (SomaAtivacaoModel t in somaAtivacoes)
            {

                @foreach (Result sa in t.somasEAtivacoes)
                {
                    <tr>
                        <td>@t.IndexList</td>
                        <td>@sa.ativacao</td>
                        <td>@sa.soma</td>
                        <td>@sa.cor</td>
                    </tr>
                }


            }

        </table>

    </div>
    <div class="table treinamento">
        <table border="1">
            <h2>Somas e ativacoes</h2>
            <tr>
                <td>Id</td>
                <td>Ativacao</td>
                <td>Soma</td>
                <td>Cor</td>
            </tr>
            @foreach (SomaAtivacaoModel t in somaAtivacoesSaida)
            {

                @foreach (Result sa in t.somasEAtivacoes)
                {
                    <tr>
                        <td>@t.IndexList</td>
                        <td>@sa.ativacao</td>
                        <td>@sa.soma</td>
                        <td>@sa.cor</td>
                    </tr>



                }


            }

        </table>

        @for (int i = 0; i < somaAtivacoesSaida.Count; i++)
        {
            @foreach (Result sa in somaAtivacoesSaida[i].somasEAtivacoes)
            {
                ErroMedioModel erro = new ErroMedioModel();
                erro.Id = i;
                double err = Model.training[i].HumorId - sa.ativacao;
                erro.erro = err;
                double derivadaFuncao = sa.ativacao * (1 - sa.ativacao);
                double deltaFuncao = err * derivadaFuncao;
                DerivadaModel derivada = new DerivadaModel { Derivada = derivadaFuncao, Index = i };
                derivadasSaida.Add(derivada);
                DeltaModel delta = new DeltaModel { Index = i, Delta = deltaFuncao, Cor = "Preto" };
                deltaSaida.Add(delta);
                erromedioSoma += Math.Abs(err);
                erroMedioClasse.Add(erro);
            }
        }
        @{
            erroMedio = erromedioSoma / somaAtivacoesSaida.Count;

        }
        <h2>Erro medio: @erroMedio</h2>

        @for (int i = 0; i < somaAtivacoes.Count; i++)
        {
            List<SomaAtivacaoModel> t = somaAtivacoes.Where(x => x.IndexList == i).ToList();
            foreach (SomaAtivacaoModel sa in t)
            {
                for (int j = 0; j < sa.somasEAtivacoes.Count; j++)
                {
                    double ativ = sa.somasEAtivacoes[j].ativacao;
                    double derivadaEscondida = ativ * (1 - ativ);
                    derivadasNeuronios.Add(new DerivadaModel { Derivada = derivadaEscondida, Index = i });
                    PesoModel peso = pesos.Where(x => x.Cor == "Preto" && x.Index == j + 1).FirstOrDefault();
                    DeltaModel deltSaida = deltaSaida.Where(x => x.Index == sa.IndexList).FirstOrDefault();
                    double deltEscondida = derivadaEscondida * peso.Peso * deltSaida.Delta;
                }

            }
        }




    </div>
