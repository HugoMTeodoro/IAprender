@model Trabalho_de_Conclusão_de_Curso_2.Models.Game1Model
@using Trabalho_de_Conclusão_de_Curso_2.Entities.Game1
@using Newtonsoft.Json

@{
    ViewData["Title"] = "Privacy Policy";
    string sobrancelhas = JsonConvert.SerializeObject(Model.sobrancelhas);
    string olhos = JsonConvert.SerializeObject(Model.olhos);
    string bocas = JsonConvert.SerializeObject(Model.bocas);


    PesoModel peso1Azul = new PesoModel { Cor = "Azul", Peso = 0.5, Index = 1 };
    PesoModel peso2Azul = new PesoModel { Cor = "Azul", Peso = 0.5, Index = 2 };
    PesoModel peso3Azul = new PesoModel { Cor = "Azul", Peso = 0.5, Index = 3 };
    PesoModel peso1Vermelho = new PesoModel { Cor = "Vermelho", Peso = 0.5, Index = 1 };
    PesoModel peso2Vermelho = new PesoModel { Cor = "Vermelho", Peso = 0.5, Index = 2 };
    PesoModel peso3Vermelho = new PesoModel { Cor = "Vermelho", Peso = 0.5, Index = 3 };
    PesoModel peso1Verde = new PesoModel { Cor = "Verde", Peso = 0.5, Index = 1 };
    PesoModel peso2Verde = new PesoModel { Cor = "Verde", Peso = 0.5, Index = 2 };
    PesoModel peso3Verde = new PesoModel { Cor = "Verde", Peso = 0.5, Index = 3 };

    PesoModel peso11Preto = new PesoModel { Cor = "Preto", Peso = 0.5, Index = 1, IndexSaida = 1 };
    PesoModel peso21Preto = new PesoModel { Cor = "Preto", Peso = 0.5, Index = 2, IndexSaida = 1 };
    PesoModel peso31Preto = new PesoModel { Cor = "Preto", Peso = 0.5, Index = 3, IndexSaida = 1 };

    PesoModel peso12Preto = new PesoModel { Cor = "Preto", Peso = 0.5, Index = 1, IndexSaida = 2 };
    PesoModel peso22Preto = new PesoModel { Cor = "Preto", Peso = 0.5, Index = 2, IndexSaida = 2 };
    PesoModel peso32Preto = new PesoModel { Cor = "Preto", Peso = 0.5, Index = 3, IndexSaida = 2 };

    PesoModel peso13Preto = new PesoModel { Cor = "Preto", Peso = 0.5, Index = 1, IndexSaida = 3 };
    PesoModel peso23Preto = new PesoModel { Cor = "Preto", Peso = 0.5, Index = 2, IndexSaida = 3 };
    PesoModel peso33Preto = new PesoModel { Cor = "Preto", Peso = 0.5, Index = 3, IndexSaida = 3 };

    PesoModel peso14Preto = new PesoModel { Cor = "Preto", Peso = 0.5, Index = 1, IndexSaida = 4 };
    PesoModel peso24Preto = new PesoModel { Cor = "Preto", Peso = 0.5, Index = 2, IndexSaida = 4 };
    PesoModel peso34Preto = new PesoModel { Cor = "Preto", Peso = 0.5, Index = 3, IndexSaida = 4 };

    List<PesoModel> pesos = new List<PesoModel>();
    pesos.Add(peso1Azul);
    pesos.Add(peso2Azul);
    pesos.Add(peso3Azul);
    pesos.Add(peso1Vermelho);
    pesos.Add(peso2Vermelho);
    pesos.Add(peso3Vermelho);
    pesos.Add(peso1Verde);
    pesos.Add(peso2Verde);
    pesos.Add(peso3Verde);
    pesos.Add(peso11Preto);
    pesos.Add(peso21Preto);
    pesos.Add(peso31Preto);

    pesos.Add(peso12Preto);
    pesos.Add(peso22Preto);
    pesos.Add(peso32Preto);

    pesos.Add(peso13Preto);
    pesos.Add(peso23Preto);
    pesos.Add(peso33Preto);

    pesos.Add(peso14Preto);
    pesos.Add(peso24Preto);
    pesos.Add(peso34Preto);


    double erromedioSoma = 0;
    double erroMedio = 0;

    double entrVsDeltaAzul = 0;
    double entrVsDeltaVermelho = 0;
    double entrVsDeltaVerde = 0;

    double entrVsDeltaEscondidaAzulSobrancelha = 0;
    double entrVsDeltaEscondidaAzulOlhos = 0;
    double entrVsDeltaEscondidaAzulBoca = 0;
    double entrVsDeltaEscondidaVermelhoSobrancelha = 0;
    double entrVsDeltaEscondidaVermelhoOlhos = 0;
    double entrVsDeltaEscondidaVermelhoBoca = 0;
    double entrVsDeltaEscondidaVerdeSobrancelha = 0;
    double entrVsDeltaEscondidaVerdeOlhos = 0;
    double entrVsDeltaEscondidaVerdeBoca = 0;

    double euller = 2.71828;

    double txAprendizagem = 0.1;
    double Momento = 1;





    List<SomaAtivacaoModel> somaAtivacoes = new List<SomaAtivacaoModel>();
    List<SomaAtivacaoModel> somaAtivacoesSigmoide = new List<SomaAtivacaoModel>();
    List<SomaAtivacaoModel> somaAtivacoesSaida = new List<SomaAtivacaoModel>();
    List<ErroMedioModel> erroMedioClasse = new List<ErroMedioModel>();
    List<DerivadaModel> derivadasSaida = new List<DerivadaModel>();
    List<DerivadaModel> derivadasNeuronios = new List<DerivadaModel>();
    List<DeltaModel> deltaSaida = new List<DeltaModel>();
    List<DeltaModel> deltaEscondida = new List<DeltaModel>();

}

<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0," />

    <link rel="stylesheet" href="~/css/Game1/Game1.css" />

    <title>Game 1</title>
</head>

<body>

    <script src="https://code.jquery.com/jquery-1.9.1.js"></script>
    <script src="~/js/Game1/Game1.js"></script>
    <div class="flex-box container-box">
        <div class="content-box">
            <div class="boneco">
                <div class="game-board" id="game-board">

                    <img src="~/Content/Game1/IArley/IArley.png" class="IArley" alt="Alternate Text" />

                    <div id="divSobrancelha">
                        <img src="~/Content/Game1/IArley/sobrancelha neutra.png" class="Sobrancelha" id="Sobrancelha" alt="Alternate Text" />
                    </div>

                    <div id="divOlhos">
                        <img src="~/Content/Game1/IArley/olhos neutro.png" class="Olhos" id="Olhos" alt="Alternate Text" />
                    </div>

                    <div>
                        <input type="image" src="~/Content/Game1/IArley/proximo-botao.png" border="0" onclick="mudarSobrancelha(@sobrancelhas)" style="position: absolute; top: 170px; left: 550px;" title="Mudar Sobrancelha" />
                    </div>

                    <div>
                        <input type="image" src="~/Content/Game1/IArley/proximo-botao.png" border="0" onclick="mudarOlhos(@olhos)" style="position: absolute; top: 238px; left: 550px;" title="Mudar Olhos" />
                    </div>

                    <div>
                        <input type="image" src="~/Content/Game1/IArley/proximo-botao.png" border="0" onclick="mudarBoca(@bocas)" style="position: absolute; top: 385px; left: 550px;" title="Mudar Boca" />
                    </div>
                    <div id="divBoca">
                        <img src="~/Content/Game1/IArley/boca neutra.png" class="Boca" id="Boca" alt="Alternate Text" />
                    </div>
                </div>
            </div>

            <div class="future">
                <h2>Content</h2>
            </div>
        </div>
    </div>
    <div class="flex-box RedeETabela">
        <div class="Rede">
            <div class="flex-box container-box">
                <div class="imagem">
                    <div class="sobrancelhaEntry">
                        000
                    </div>
                    <div class="olhosEntry">
                        000
                    </div>

                    <div class="bocaEntry">
                        000
                    </div>
                    <div class="peso1Azul">
                        @peso1Azul.Peso
                    </div>
                    <div class="peso1Vermelho">
                        @peso2Azul.Peso
                    </div>
                    <div class="peso1Verde">
                        @peso3Azul.Peso
                    </div>
                    <div class="peso2Azul">
                        @peso1Vermelho.Peso
                    </div>
                    <div class="peso2Vermelho">
                        @peso2Vermelho.Peso
                    </div>
                    <div class="peso2Verde">
                        @peso3Vermelho.Peso
                    </div>
                    <div class="peso3Azul">
                        @peso1Verde.Peso
                    </div>
                    <div class="peso3Vermelho">
                        @peso2Verde.Peso
                    </div>
                    <div class="peso3Verde">
                        @peso3Verde.Peso
                    </div>
                    <div class="peso11Preto">
                        000
                    </div>
                    <div class="peso21Preto">
                        000
                    </div>
                    <div class="peso31Preto">
                        000
                    </div>
                    <div class="somaAtivacaoN1">
                        Soma=
                        <br>
                        Ativação=
                    </div>
                    <div class="somaAtivacaoN2">
                        Soma=
                        <br>
                        Ativação=
                    </div>
                    <div class="somaAtivacaoN3">
                        Soma=
                        <br>
                        Ativação=
                    </div>
                </div>
            </div>
        </div>


    </div>

    <div class="table treinamento">
        <table border="1">
            <h2>Treinamento</h2>
            <tr>
                <td>Id</td>
                <td>Sobrancelhas</td>
                <td>Olhos</td>
                <td>Boca</td>
                <td>Humor</td>
                <td>HumorId</td>

                @foreach (IArleyTraining t in Model.training)
                {
                <tr>
                    <td>@t.Id</td>
                    <td>@t.Sobrancelha</td>
                    <td>@t.Olhos</td>
                    <td>@t.Boca</td>
                    <td>@t.Humor</td>
                    <td>@t.HumorId</td>
                </tr>
                }

        </table>

    </div>

</body>

@{
    FunctionTrainingObjModel modelo = new FunctionTrainingObjModel { pesos = pesos, erroMedio = new List<double>() };
    // FunctionTrainingObjModel modelo = new FunctionTrainingObjModel {pesos=pesos,deltaEscondida=deltaEscondida,deltaSaida=deltaSaida,derivadasNeuronios=derivadasNeuronios,derivadasSaida=derivadasSaida,entrVsDeltaAzul=entrVsDeltaAzul,entrVsDeltaEscondidaAzulBoca=entrVsDeltaEscondidaAzulBoca,entrVsDeltaEscondidaAzulOlhos=entrVsDeltaEscondidaAzulOlhos,entrVsDeltaEscondidaAzulSobrancelha=entrVsDeltaEscondidaAzulSobrancelha,entrVsDeltaEscondidaVerdeBoca=entrVsDeltaEscondidaVerdeBoca,entrVsDeltaEscondidaVerdeOlhos=entrVsDeltaEscondidaVerdeOlhos,entrVsDeltaEscondidaVerdeSobrancelha=entrVsDeltaEscondidaVerdeSobrancelha,entrVsDeltaEscondidaVermelhoBoca=entrVsDeltaEscondidaVermelhoBoca,entrVsDeltaEscondidaVermelhoOlhos=entrVsDeltaEscondidaVermelhoOlhos,entrVsDeltaEscondidaVermelhoSobrancelha=entrVsDeltaEscondidaVermelhoSobrancelha,entrVsDeltaVerde=entrVsDeltaVerde,entrVsDeltaVermelho=entrVsDeltaVermelho,erroMedioClasse=erroMedioClasse,erromedioSoma=erromedioSoma,Momento=Momento,somaAtivacoes=somaAtivacoes,somaAtivacoesSaida=somaAtivacoesSaida,txAprendizagem=txAprendizagem };
    for (int i = 0; i < 10000; i++)
    {
        modelo = Epoca(modelo.pesos);
    }
    @foreach (double err in modelo.erroMedio)
    {
        <h2>@err </h2>
        <br>
    }

    pesos = modelo.pesos;
    @for (int i = 0; i < Model.training.Count; i++)
    {
        SomaAtivacaoModel model = new SomaAtivacaoModel { IndexList = i };
        SomaAtivacaoModel modelSigmoide = new SomaAtivacaoModel { IndexList = i };
        IArleyTraining t = Model.training[i];

        double somaAzul = (t.Sobrancelha * peso1Azul.Peso) + (t.Olhos * peso2Azul.Peso) + (t.Boca * peso3Azul.Peso);
        double somaVermelho = (t.Sobrancelha * peso1Vermelho.Peso) + (t.Olhos * peso2Vermelho.Peso) + (t.Boca * peso3Vermelho.Peso);
        double somaVerde = (t.Sobrancelha * peso1Verde.Peso) + (t.Olhos * peso2Verde.Peso) + (t.Boca * peso3Verde.Peso);


        double softmaxAzul = Math.Pow(euller, somaAzul) / ((Math.Pow(euller, somaAzul) + Math.Pow(euller, somaVermelho) + Math.Pow(euller, somaVerde)));
        double sigmoideAzul = 1 / (1 + Math.Pow(euller, -somaAzul));
        Result result = new Result { soma = somaAzul, cor = "Azul", ativacao = softmaxAzul };
        model.somasEAtivacoes.Add(result);
        result = new Result { soma = somaAzul, cor = "Azul", ativacao = sigmoideAzul };
        modelSigmoide.somasEAtivacoes.Add(result);

        double softmaxVermelho = Math.Pow(euller, somaVermelho) / ((Math.Pow(euller, somaAzul) + Math.Pow(euller, somaVermelho) + Math.Pow(euller, somaVerde)));
        double sigmoideVermelho = 1 / (1 + Math.Pow(euller, -somaVermelho));
        result = new Result { soma = somaVermelho, cor = "Vermelho", ativacao = softmaxVermelho };
        model.somasEAtivacoes.Add(result);
        result = new Result { soma = somaAzul, cor = "Vermelho", ativacao = sigmoideVermelho };
        modelSigmoide.somasEAtivacoes.Add(result);

        double softmaxVerde = Math.Pow(euller, somaVerde) / ((Math.Pow(euller, somaAzul) + Math.Pow(euller, somaVermelho) + Math.Pow(euller, somaVerde)));
        double sigmoideVerde = 1 / (1 + Math.Pow(euller, -somaVerde));
        result = new Result { soma = somaVerde, cor = "Verde", ativacao = softmaxVerde };
        model.somasEAtivacoes.Add(result);
        result = new Result { soma = somaAzul, cor = "Verde", ativacao = sigmoideVerde };
        modelSigmoide.somasEAtivacoes.Add(result);



        somaAtivacoes.Add(model);
        somaAtivacoesSigmoide.Add(modelSigmoide);

    }

    @for (int i = 0; i < Model.training.Count; i++)
    {
        SomaAtivacaoModel model = new SomaAtivacaoModel { IndexList = i };

        List<SomaAtivacaoModel> t = somaAtivacoesSigmoide.Where(x => x.IndexList == i).ToList();
        double somaPreto1 = 0;
        double somaPreto2 = 0;
        double somaPreto3 = 0;
        double somaPreto4 = 0;

        foreach (SomaAtivacaoModel sam in t)
        {

            somaPreto1 = (sam.somasEAtivacoes[0].ativacao * peso11Preto.Peso) + (sam.somasEAtivacoes[1].ativacao * peso21Preto.Peso) + (sam.somasEAtivacoes[2].ativacao * peso31Preto.Peso);
            somaPreto2 = (sam.somasEAtivacoes[0].ativacao * peso12Preto.Peso) + (sam.somasEAtivacoes[1].ativacao * peso22Preto.Peso) + (sam.somasEAtivacoes[2].ativacao * peso32Preto.Peso);
            somaPreto3 = (sam.somasEAtivacoes[0].ativacao * peso13Preto.Peso) + (sam.somasEAtivacoes[1].ativacao * peso23Preto.Peso) + (sam.somasEAtivacoes[2].ativacao * peso33Preto.Peso);
            somaPreto4 = (sam.somasEAtivacoes[0].ativacao * peso14Preto.Peso) + (sam.somasEAtivacoes[1].ativacao * peso24Preto.Peso) + (sam.somasEAtivacoes[2].ativacao * peso34Preto.Peso);

            double softmaxPreto = Math.Pow(euller, somaPreto1) / (Math.Pow(euller, somaPreto1) + Math.Pow(euller, somaPreto2) + Math.Pow(euller, somaPreto3) + Math.Pow(euller, somaPreto4));
            Result result = new Result { soma = somaPreto1, cor = "Preto", ativacao = softmaxPreto, IdSaida = 1 };
            model.somasEAtivacoes.Add(result);

            softmaxPreto = Math.Pow(euller, somaPreto2) / (Math.Pow(euller, somaPreto1) + Math.Pow(euller, somaPreto2) + Math.Pow(euller, somaPreto3) + Math.Pow(euller, somaPreto4));
            result = new Result { soma = somaPreto2, cor = "Preto", ativacao = softmaxPreto, IdSaida = 2 };
            model.somasEAtivacoes.Add(result);

            softmaxPreto = Math.Pow(euller, somaPreto3) / (Math.Pow(euller, somaPreto1) + Math.Pow(euller, somaPreto2) + Math.Pow(euller, somaPreto3) + Math.Pow(euller, somaPreto4));
            result = new Result { soma = somaPreto3, cor = "Preto", ativacao = softmaxPreto, IdSaida = 3 };
            model.somasEAtivacoes.Add(result);

            softmaxPreto = Math.Pow(euller, somaPreto4) / (Math.Pow(euller, somaPreto1) + Math.Pow(euller, somaPreto2) + Math.Pow(euller, somaPreto3) + Math.Pow(euller, somaPreto4));
            result = new Result { soma = somaPreto4, cor = "Preto", ativacao = softmaxPreto, IdSaida = 4 };
            model.somasEAtivacoes.Add(result);

        }
        somaAtivacoesSaida.Add(model);
    }

    foreach (PesoModel peso in pesos)
    {
        <h2>Peso @peso.Cor @peso.Index @peso.IndexSaida: @peso.Peso</h2>
    }

}

<div class="table treinamento">
    <table border="1">
        <h2>Somas e ativacoes</h2>
        <tr>
            <td>Id</td>
            <td>Ativacao</td>
            <td>Soma</td>
            <td>Cor</td>
            <td>Esperado</td>

        </tr>
        @foreach (SomaAtivacaoModel t in somaAtivacoesSaida)
        {

            @foreach (Result sa in t.somasEAtivacoes)
            {
                <tr>
                    <td>@t.IndexList</td>
                    <td>@sa.ativacao</td>
                    <td>@sa.soma</td>
                    <td>@sa.cor</td>
                    @switch (sa.IdSaida)
                    {
                        case 1:
                        <td>@Model.training[t.IndexList].Triste</td>
                        break;
                        case 2:
                        <td>@Model.training[t.IndexList].Neutro</td>
                        break;
                        case 3:
                        <td>@Model.training[t.IndexList].Feliz</td>
                        break;
                        case 4:
                        <td>@Model.training[t.IndexList].Raiva</td>
                        break;
                    }
                    
                </tr>



            }


        }
        @foreach (PesoModel peso in pesos)
       {
           
       }
        @functions {
            public FunctionTrainingObjModel Epoca(List<PesoModel> pesos)
            {
                PesoModel peso1Azul = pesos[0];
                PesoModel peso2Azul = pesos[1];
                PesoModel peso3Azul = pesos[2];
                PesoModel peso1Vermelho = pesos[3];
                PesoModel peso2Vermelho = pesos[4];
                PesoModel peso3Vermelho = pesos[5];
                PesoModel peso1Verde = pesos[6];
                PesoModel peso2Verde = pesos[7];
                PesoModel peso3Verde = pesos[8];

                PesoModel peso11Preto = pesos[9];
                PesoModel peso21Preto = pesos[10];
                PesoModel peso31Preto = pesos[11];

                PesoModel peso12Preto = pesos[12];
                PesoModel peso22Preto = pesos[13];
                PesoModel peso32Preto = pesos[14];

                PesoModel peso13Preto = pesos[15];
                PesoModel peso23Preto = pesos[16];
                PesoModel peso33Preto = pesos[17];

                PesoModel peso14Preto = pesos[18];
                PesoModel peso24Preto = pesos[19];
                PesoModel peso34Preto = pesos[20];

                double erromedioSoma1 = 0;
                double erromedioSoma2 = 0;
                double erromedioSoma3 = 0;
                double erromedioSoma4 = 0;
                double erroMedio1 = 0;
                double erroMedio2 = 0;
                double erroMedio3 = 0;
                double erroMedio4 = 0;

                double entrVsDeltaEscondidaAzulSobrancelha = 0;
                double entrVsDeltaEscondidaAzulOlhos = 0;
                double entrVsDeltaEscondidaAzulBoca = 0;
                double entrVsDeltaEscondidaVermelhoSobrancelha = 0;
                double entrVsDeltaEscondidaVermelhoOlhos = 0;
                double entrVsDeltaEscondidaVermelhoBoca = 0;
                double entrVsDeltaEscondidaVerdeSobrancelha = 0;
                double entrVsDeltaEscondidaVerdeOlhos = 0;
                double entrVsDeltaEscondidaVerdeBoca = 0;


                double txAprendizagem = 0.01;
                double Momento = 0.1;
                double euller = 2.71828;




                List<SomaAtivacaoModel> somaAtivacoes = new List<SomaAtivacaoModel>();
                List<SomaAtivacaoModel> somaAtivacoesSigmoide = new List<SomaAtivacaoModel>();
                List<SomaAtivacaoModel> somaAtivacoesSaida = new List<SomaAtivacaoModel>();
                List<ErroMedioModel> erroMedioClasse = new List<ErroMedioModel>();
                List<DerivadaModel> derivadasSaida = new List<DerivadaModel>();
                List<DerivadaModel> derivadasNeuronios = new List<DerivadaModel>();
                List<DeltaModel> deltaSaida = new List<DeltaModel>();
                List<DeltaModel> deltaEscondida = new List<DeltaModel>();


                @for (int i = 0; i < Model.training.Count; i++)
                {
                    SomaAtivacaoModel model = new SomaAtivacaoModel { IndexList = i };
                    SomaAtivacaoModel modelSigmoide = new SomaAtivacaoModel { IndexList = i };
                    IArleyTraining t = Model.training[i];

                    double somaAzul = (t.Sobrancelha * peso1Azul.Peso) + (t.Olhos * peso2Azul.Peso) + (t.Boca * peso3Azul.Peso);
                    double somaVermelho = (t.Sobrancelha * peso1Vermelho.Peso) + (t.Olhos * peso2Vermelho.Peso) + (t.Boca * peso3Vermelho.Peso);
                    double somaVerde = (t.Sobrancelha * peso1Verde.Peso) + (t.Olhos * peso2Verde.Peso) + (t.Boca * peso3Verde.Peso);


                    double softmaxAzul = Math.Pow(euller, somaAzul) / ((Math.Pow(euller, somaAzul) + Math.Pow(euller, somaVermelho) + Math.Pow(euller, somaVerde)));
                    double sigmoideAzul = 1 / (1 + Math.Pow(euller, -somaAzul));
                    Result result = new Result { soma = somaAzul, cor = "Azul", ativacao = softmaxAzul };
                    model.somasEAtivacoes.Add(result);
                    result = new Result { soma = somaAzul, cor = "Azul", ativacao = sigmoideAzul };
                    modelSigmoide.somasEAtivacoes.Add(result);

                    double softmaxVermelho = Math.Pow(euller, somaVermelho) / ((Math.Pow(euller, somaAzul) + Math.Pow(euller, somaVermelho) + Math.Pow(euller, somaVerde)));
                    double sigmoideVermelho = 1 / (1 + Math.Pow(euller, -somaVermelho));
                    result = new Result { soma = somaVermelho, cor = "Vermelho", ativacao = softmaxVermelho };
                    model.somasEAtivacoes.Add(result);
                    result = new Result { soma = somaAzul, cor = "Vermelho", ativacao = sigmoideVermelho };
                    modelSigmoide.somasEAtivacoes.Add(result);

                    double softmaxVerde = Math.Pow(euller, somaVerde) / ((Math.Pow(euller, somaAzul) + Math.Pow(euller, somaVermelho) + Math.Pow(euller, somaVerde)));
                    double sigmoideVerde = 1 / (1 + Math.Pow(euller, -somaVerde));
                    result = new Result { soma = somaVerde, cor = "Verde", ativacao = softmaxVerde };
                    model.somasEAtivacoes.Add(result);
                    result = new Result { soma = somaAzul, cor = "Verde", ativacao = sigmoideVerde };
                    modelSigmoide.somasEAtivacoes.Add(result);



                    somaAtivacoes.Add(model);
                    somaAtivacoesSigmoide.Add(modelSigmoide);

                }

                @for (int i = 0; i < Model.training.Count; i++)
                {
                    SomaAtivacaoModel model = new SomaAtivacaoModel { IndexList = i };

                    List<SomaAtivacaoModel> t = somaAtivacoesSigmoide.Where(x => x.IndexList == i).ToList();
                    double somaPreto1 = 0;
                    double somaPreto2 = 0;
                    double somaPreto3 = 0;
                    double somaPreto4 = 0;

                    foreach (SomaAtivacaoModel sam in t)
                    {

                        somaPreto1 = (sam.somasEAtivacoes[0].ativacao * peso11Preto.Peso) + (sam.somasEAtivacoes[1].ativacao * peso21Preto.Peso) + (sam.somasEAtivacoes[2].ativacao * peso31Preto.Peso);
                        somaPreto2 = (sam.somasEAtivacoes[0].ativacao * peso12Preto.Peso) + (sam.somasEAtivacoes[1].ativacao * peso22Preto.Peso) + (sam.somasEAtivacoes[2].ativacao * peso32Preto.Peso);
                        somaPreto3 = (sam.somasEAtivacoes[0].ativacao * peso13Preto.Peso) + (sam.somasEAtivacoes[1].ativacao * peso23Preto.Peso) + (sam.somasEAtivacoes[2].ativacao * peso33Preto.Peso);
                        somaPreto4 = (sam.somasEAtivacoes[0].ativacao * peso14Preto.Peso) + (sam.somasEAtivacoes[1].ativacao * peso24Preto.Peso) + (sam.somasEAtivacoes[2].ativacao * peso34Preto.Peso);

                        double softmaxPreto = Math.Pow(euller, somaPreto1) / (Math.Pow(euller, somaPreto1) + Math.Pow(euller, somaPreto2) + Math.Pow(euller, somaPreto3) + Math.Pow(euller, somaPreto4));
                        Result result = new Result { soma = somaPreto1, cor = "Preto", ativacao = softmaxPreto, IdSaida = 1 };
                        model.somasEAtivacoes.Add(result);

                        softmaxPreto = Math.Pow(euller, somaPreto2) / (Math.Pow(euller, somaPreto1) + Math.Pow(euller, somaPreto2) + Math.Pow(euller, somaPreto3) + Math.Pow(euller, somaPreto4));
                        result = new Result { soma = somaPreto2, cor = "Preto", ativacao = softmaxPreto, IdSaida = 2 };
                        model.somasEAtivacoes.Add(result);

                        softmaxPreto = Math.Pow(euller, somaPreto3) / (Math.Pow(euller, somaPreto1) + Math.Pow(euller, somaPreto2) + Math.Pow(euller, somaPreto3) + Math.Pow(euller, somaPreto4));
                        result = new Result { soma = somaPreto3, cor = "Preto", ativacao = softmaxPreto, IdSaida = 3 };
                        model.somasEAtivacoes.Add(result);

                        softmaxPreto = Math.Pow(euller, somaPreto4) / (Math.Pow(euller, somaPreto1) + Math.Pow(euller, somaPreto2) + Math.Pow(euller, somaPreto3) + Math.Pow(euller, somaPreto4));
                        result = new Result { soma = somaPreto4, cor = "Preto", ativacao = softmaxPreto, IdSaida = 4 };
                        model.somasEAtivacoes.Add(result);

                    }
                    somaAtivacoesSaida.Add(model);
                }

                @for (int i = 0; i < somaAtivacoesSaida.Count; i++)
                {
                    @for (int j = 1; j <= 4; j++)
                    {
                        @foreach (Result sa in somaAtivacoesSaida[i].somasEAtivacoes.Where(x => x.IdSaida == j))
                        {

                            ErroMedioModel erro = new ErroMedioModel();
                            erro.Id = i;
                            erro.IdSaida = j;
                            double err = 0;
                            switch (j)
                            {
                                case 1:
                                    err = Model.training[i].Triste - sa.ativacao;
                                    erromedioSoma1 += Math.Abs(err);
                                    break;
                                case 2:
                                    err = Model.training[i].Neutro - sa.ativacao;
                                    erromedioSoma2 += Math.Abs(err);
                                    break;
                                case 3:
                                    err = Model.training[i].Feliz - sa.ativacao;
                                    erromedioSoma3 += Math.Abs(err);
                                    break;
                                case 4:
                                    err = Model.training[i].Raiva - sa.ativacao;
                                    erromedioSoma4 += Math.Abs(err);
                                    break;
                            }
                            erro.erro = err;
                            double derivadaFuncao = sa.ativacao * (1 - sa.ativacao);
                            double deltaFuncao = err * derivadaFuncao;
                            DerivadaModel derivada = new DerivadaModel { Derivada = derivadaFuncao, Index = i, IdSaida = j };
                            derivadasSaida.Add(derivada);
                            DeltaModel delta = new DeltaModel { Index = i, Delta = deltaFuncao, Cor = "Preto", IdSaida = j };
                            deltaSaida.Add(delta);
                            erroMedioClasse.Add(erro);
                        }

                    }
                }
                @for (int i = 0; i < somaAtivacoesSigmoide.Count; i++)
                {
                    List<SomaAtivacaoModel> t = somaAtivacoesSigmoide.Where(x => x.IndexList == i).ToList();
                    foreach (SomaAtivacaoModel sa in t)
                    {
                        for (int j = 0; j < sa.somasEAtivacoes.Count; j++)
                        {
                            for (int k = 1; k <= 4; k++)
                            {
                                double ativ = sa.somasEAtivacoes[j].ativacao;
                                double derivadaEscondida = ativ * (1 - ativ);
                                derivadasNeuronios.Add(new DerivadaModel { Derivada = derivadaEscondida, Index = i });
                                PesoModel peso = pesos.Where(x => x.Cor == "Preto" && x.Index == j + 1 && x.IndexSaida == k).FirstOrDefault();
                                DeltaModel deltSaida = deltaSaida.Where(x => x.Index == sa.IndexList && x.IdSaida == k).FirstOrDefault();
                                double deltEscondida = derivadaEscondida * peso.Peso * deltSaida.Delta;
                                DeltaModel deltaEscond = new DeltaModel { Cor = sa.somasEAtivacoes[j].cor, Delta = deltEscondida, Index = i, IdSaida = k };
                                deltaEscondida.Add(deltaEscond);
                            }

                        }

                    }
                }

                List<double> listEntrVsDeltaAzul = new List<double> { 0, 0, 0, 0 };
                List<double> listEntrVsDeltaVermelho = new List<double> { 0, 0, 0, 0 };
                List<double> listEntrVsDeltaVerde = new List<double> { 0, 0, 0, 0 };

                @for (int i = 0; i < somaAtivacoesSigmoide.Count; i++)
                {
                    for (int k = 1; k <= 4; k++)
                    {
                        SomaAtivacaoModel t = somaAtivacoesSigmoide.Where(x => x.IndexList == i).FirstOrDefault();
                        DeltaModel deltSaida = deltaSaida.Where(x => x.Index == t.IndexList && x.IdSaida == k).FirstOrDefault();
                        listEntrVsDeltaAzul[k - 1] += t.somasEAtivacoes[0].ativacao * deltSaida.Delta;

                        deltSaida = deltaSaida.Where(x => x.Index == t.IndexList && x.IdSaida == k).FirstOrDefault();
                        listEntrVsDeltaVermelho[k - 1] += t.somasEAtivacoes[1].ativacao * deltSaida.Delta;

                        deltSaida = deltaSaida.Where(x => x.Index == t.IndexList && x.IdSaida == k).FirstOrDefault();
                        listEntrVsDeltaVerde[k - 1] += t.somasEAtivacoes[2].ativacao * deltSaida.Delta;
                    }


                }


                pesos[9].Peso = (peso11Preto.Peso * Momento) + (listEntrVsDeltaAzul[0] * txAprendizagem);
                pesos[10].Peso = (peso21Preto.Peso * Momento) + (listEntrVsDeltaVermelho[0] * txAprendizagem);
                pesos[11].Peso = (peso31Preto.Peso * Momento) + (listEntrVsDeltaVerde[0] * txAprendizagem);

                pesos[12].Peso = (peso11Preto.Peso * Momento) + (listEntrVsDeltaAzul[1] * txAprendizagem);
                pesos[13].Peso = (peso21Preto.Peso * Momento) + (listEntrVsDeltaVermelho[1] * txAprendizagem);
                pesos[14].Peso = (peso31Preto.Peso * Momento) + (listEntrVsDeltaVerde[1] * txAprendizagem);

                pesos[15].Peso = (peso11Preto.Peso * Momento) + (listEntrVsDeltaAzul[2] * txAprendizagem);
                pesos[16].Peso = (peso21Preto.Peso * Momento) + (listEntrVsDeltaVermelho[2] * txAprendizagem);
                pesos[17].Peso = (peso31Preto.Peso * Momento) + (listEntrVsDeltaVerde[2] * txAprendizagem);

                pesos[18].Peso = (peso11Preto.Peso * Momento) + (listEntrVsDeltaAzul[3] * txAprendizagem);
                pesos[19].Peso = (peso21Preto.Peso * Momento) + (listEntrVsDeltaVermelho[3] * txAprendizagem);
                pesos[20].Peso = (peso31Preto.Peso * Momento) + (listEntrVsDeltaVerde[3] * txAprendizagem);



                @for (int i = 0; i < Model.training.Count; i++)
                {
                    for (int k = 1; k <= 4; k++)
                    {
                        IArleyTraining t = Model.training[i];
                        DeltaModel deltEscondido = deltaEscondida.Where(x => x.Index == i && x.Cor.Equals("Azul") && x.IdSaida == k).FirstOrDefault();
                        entrVsDeltaEscondidaAzulSobrancelha += t.Sobrancelha * deltEscondido.Delta;
                        entrVsDeltaEscondidaAzulOlhos += t.Olhos * deltEscondido.Delta;
                        entrVsDeltaEscondidaAzulBoca += t.Boca * deltEscondido.Delta;

                        deltEscondido = deltaEscondida.Where(x => x.Index == i && x.Cor == "Vermelho" && x.IdSaida == k).FirstOrDefault();
                        entrVsDeltaEscondidaVermelhoSobrancelha += t.Sobrancelha * deltEscondido.Delta;
                        entrVsDeltaEscondidaVermelhoOlhos += t.Olhos * deltEscondido.Delta;
                        entrVsDeltaEscondidaVermelhoBoca += t.Boca * deltEscondido.Delta;

                        deltEscondido = deltaEscondida.Where(x => x.Index == i && x.Cor == "Verde" && x.IdSaida == k).FirstOrDefault();
                        entrVsDeltaEscondidaVerdeSobrancelha += t.Sobrancelha * deltEscondido.Delta;
                        entrVsDeltaEscondidaVerdeOlhos += t.Olhos * deltEscondido.Delta;
                        entrVsDeltaEscondidaVerdeBoca += t.Boca * deltEscondido.Delta;
                    }



                }


                pesos[0].Peso = (peso1Azul.Peso * Momento) + (entrVsDeltaEscondidaAzulSobrancelha * txAprendizagem);
                pesos[1].Peso = (peso2Azul.Peso * Momento) + (entrVsDeltaEscondidaAzulOlhos * txAprendizagem);
                pesos[2].Peso = (peso3Azul.Peso * Momento) + (entrVsDeltaEscondidaAzulBoca * txAprendizagem);

                pesos[3].Peso = (peso1Vermelho.Peso * Momento) + (entrVsDeltaEscondidaVermelhoSobrancelha * txAprendizagem);
                pesos[4].Peso = (peso2Vermelho.Peso * Momento) + (entrVsDeltaEscondidaVermelhoOlhos * txAprendizagem);
                pesos[5].Peso = (peso3Vermelho.Peso * Momento) + (entrVsDeltaEscondidaVermelhoBoca * txAprendizagem);

                pesos[6].Peso = (peso1Verde.Peso * Momento) + (entrVsDeltaEscondidaVerdeSobrancelha * txAprendizagem);
                pesos[7].Peso = (peso2Verde.Peso * Momento) + (entrVsDeltaEscondidaVerdeOlhos * txAprendizagem);
                pesos[8].Peso = (peso3Verde.Peso * Momento) + (entrVsDeltaEscondidaVerdeBoca * txAprendizagem);

                erroMedio1 = erromedioSoma1 / Model.training.Count;
                erroMedio2 = erromedioSoma2 / Model.training.Count;
                erroMedio3 = erromedioSoma3 / Model.training.Count;
                erroMedio4 = erromedioSoma4 / Model.training.Count;
                List<double> erros = new List<double> { erroMedio1, erroMedio2, erroMedio3, erroMedio4 };

                return new FunctionTrainingObjModel { pesos = pesos, erroMedio = erros };

            }
        }

